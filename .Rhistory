folder <- paste("//kc.kingcounty.lcl/dnrp/WLRD/STS/Share/Marine Group/CTD_data_repository/", station, "/", sep = "")
fname_qc <- list.files(folder, pattern = "qcd.csv$")
fname_raw <- list.files(folder, pattern= "raw.csv$")
data_raw <- read.csv(paste(folder, fname_raw, sep = ""))
date_to_save <- str_replace_all(date_to_plot, "/", "-")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# First tackle the raw data
data_raw <- data_raw %>% separate(Sampledate, into = c("Date", "Time"), sep = " ")
datatype = "raw"
data_to_plot_raw <- data_raw %>% filter(Date == date_to_plot)
p1 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Chlorophyll..Field..mg.m.3., y = Depth, color = CH_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(Chlorophyll~(mg/m^{3})), y = "Depth (m)")
p4 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Dissolved.Oxygen..Field..mg.l.ws.2., y = Depth, color = DO_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Dissolved Oxygen (mg/L)", y = "")
p7 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Salinity..Field..PSS., y = Depth, color = SA_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Salinity (PSS)", y = "") +
annotate("text",  x=min(data_to_plot_raw$Salinity..Field..PSS.),
y = max(data_to_plot_raw$Depth), label = paste(station, date_to_plot),
hjust = 0, vjust = 0)
p2 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Nitrite...Nitrate.Nitrogen..Field..mg.L., y = Depth, color = NO23_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Nitrate+Nitrite N (mg/L)", y = "Depth (m)")
p5 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Sample.Temperature..Field..deg.C., y = Depth, color = ST_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(paste("Temperature (",degree,"C)")), y = "")
p8 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Sigma.Density..Field..Kg.m.3., y = Depth, color = SD_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(sigma[theta]~(kg/m^{3})), y = "")
p3 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Density..Field..Kg.m.3., y = Depth, color = DN_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(Density~(kg/m^{3})), y = "Depth (m)")
p6 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Light.Transmission...., y = Depth, color = LT_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Light transmission", y = "")
p9 <- ggplot(data = data_to_plot_raw) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = log(Light.Intensity..PAR...Field..umol.sm2.), y = Depth, color = PA_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "log(PAR)", y = "")
png(paste(folder, datatype, "/", station, "_", date_to_save, "_", datatype, ".png", sep = ""))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, p9, cols = 3)
dev.off()
# And now the qcd data
if (qcd == T) {
data_qcd <- read.csv(paste(folder, fname_qc, sep = ""))
data_qcd <- data_qcd %>% separate(Sampledate, into = c("Date", "Time"), sep = " ")
datatype = "qcd"
data_to_plot_qcd <- data_qcd %>% filter(Date == date_to_plot)
p1 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Chlorophyll..Field..mg.m.3., y = Depth, color = CH_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(Chlorophyll~(mg/m^{3})), y = "Depth (m)")
p4 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Dissolved.Oxygen..Field..mg.l.ws.2., y = Depth, color = DO_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Dissolved Oxygen (mg/L)", y = "")
p7 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Salinity..Field..PSS., y = Depth, color = SA_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Salinity (PSS)", y = "") +
annotate("text",  x=min(data_to_plot_raw$Salinity..Field..PSS.),
y = max(data_to_plot_raw$Depth), label = paste(station, date_to_plot),
hjust = 0, vjust = 0)
p2 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Nitrite...Nitrate.Nitrogen..Field..mg.L., y = Depth, color = NO23_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Nitrate+Nitrite N (mg/L)", y = "Depth (m)")
p5 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Sample.Temperature..Field..deg.C., y = Depth, color = ST_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(paste("Temperature (",degree,"C)")), y = "")
p8 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Sigma.Density..Field..Kg.m.3., y = Depth, color = SD_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(sigma[theta]~(kg/m^{3})), y = "")
p3 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Density..Field..Kg.m.3., y = Depth, color = DN_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = expression(Density~(kg/m^{3})), y = "Depth (m)")
p6 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = Light.Transmission...., y = Depth, color = LT_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "Light transmission", y = "")
p9 <- ggplot(data = data_to_plot_qcd) +
theme_bw() +
theme(legend.position = "none") +
geom_point(aes(x = log(Light.Intensity..PAR...Field..umol.sm2.), y = Depth, color = PA_Qual %in% bad_quals)) +
scale_y_reverse() +
scale_color_manual(values = c("TRUE" = "red", "FALSE"= "black")) +
labs(x = "log(PAR)", y = "")
png(paste(folder, datatype, "/", station, "_", date_to_save, "_", datatype, ".png", sep = ""))
multiplot(p1, p2, p3, p4, p5, p6, p7, p8, p9, cols = 3)
dev.off()
}
load("~/R/kcmarine/data/discrete_parms.rda")
View(discrete_parms)
class(discrete_parms)
library(devtools)
View(discrete_parms)
discrete_parms %>% filter(grepl(DisplayName, "Nitrogen"))
library(tidyverse)
discrete_parms %>% filter(grepl(DisplayName, "Nitrogen"))
discrete_parms %>% filter(grepl("Nitrogen", DisplayName))
discrete_parms %>% filter(grepl("Nitrogen", DisplayName)) %>% select(ParmName)
discrete_parms %>% filter(grepl("Nitrogen", DisplayName)) %>% pull(ParmName)
discrete_parms[grepl("Nitrogen", DisplayName)),]
discrete_parms[grepl("Nitrogen", DisplayName),]
discrete_parms[grepl("Nitrogen", discrete_parms$DisplayName),]
nitrogen_only <- discrete_parms[grepl("Nitrogen", discrete_parms$DisplayName)),]
nitrogen_only <- discrete_parms[grepl("Nitrogen", discrete_parms$DisplayName),]
parms_to_download <- nitrogen_only$DisplayName
parms_to_download
parms_to_download <- nitrogen_only$ParmName
document()
library(kcmarine)
document()
library(kcmarine)
document()
library(kcmarine)
data(discrete_parms)
force(discrete_parms)
rm(list = ls())
data(discrete_parms)
discrete_parms$ParmID
load("C:/Users/taymartin/OneDrive - King County/Documents/R/kcmarine/data/mooring_sites.rda")
View(mooring_sites)
library(lubridate)
lubridate::month()
?str_detect
library(readr)
?readr
?read_csv
?read_csv
?as.Date
?rename
library(devtools)
document()
library(kcmarine)
?kcmarine
document()
library(kcmarine)
document()
library(kcmarine)
test <- import_CTD("NSEX01.txt")
library(kcmarine)
test <- import_CTD("NSEX01.txt")
View(test)
document()
library(kcmarine)
?filter
?%in%
?Sys.Date()
?fromJSON
library(jsonlite)
?fromJSON
?readLines
?rbind
?subset
?gsub
?as.POSIXct
?with
?write_csv
library(kcmarine)
sites <- c("NSEX01", "JSUR01", "LSNT01")
parms_in <- c("NNN", "DO")
fname <- "my_discrete_data.csv"
download_discrete(sites, parms_in, fname)
?read_delim
?strsplit
?rename
?add_column
document()
library(devtools)
document()
library(kcmarine)
document()
library(kcmarine)
document()
library(kcmarine)
f <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
f
test <- import_mooring_QYC(f)
?col_character
library(kcmarine)
f <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
test <- import_mooring_QYC(f)
readr::read_delim(f, delim = ',', skip = 23, n_max = 1,
col_names = FALSE, col_types = list(
readr::col_character(), readr::col_character()))
library(kcmarine)
library(kcmarine)
file <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
data <- import_mooring_QYC(file)
library(kcmarine)
library(kcmarine)
file <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
data <- import_mooring_QYC(file)
file <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
data <- import_mooring_QYC(file)
library(kcmarine)
file <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
data <- import_mooring_QYC(file)
View(data)
file <- system.file("extdata", "test_CTD_data.txt", package = "kcmarine")
data <- import_CTD(file)
?cols
library(kcmarine)
file <- system.file("extdata", "test_CTD_data.txt", package = "kcmarine")
data <- import_CTD(file)
View(data)
file <- system.file("extdata", "test_mooring_QYC_data.txt", package = "kcmarine")
data <- import_mooring_QYC(file)
document()
library(kcmarine)
library(kcmarine)
library(kcmarine)
getwd()
filename <- "C:/Users/taymartin/OneDrive - King County/Docuemnts/CTD/JSUR01_bottle_data.csv"
?col_logical
temp = readr::read_csv(filename, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%m/%d/%Y"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
temp = readr::read_csv(filename, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%m/%d/%Y"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
filename <- "C:/Users/taymartin/OneDrive - King County/Documents/CTD/JSUR01_bottle_data.csv"
temp = readr::read_csv(filename, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%m/%d/%Y"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
library(tidyverse)
temp = readr::read_csv(filename, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%m/%d/%Y"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
temp = readr::read_csv(filename, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%m/%d/%Y"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
fname = filename
temp = readr::read_csv(fname, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%Y-%m-%d"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SideTypeId = col_integer(),
LimsProjectNum = col_character()
))
temp = readr::read_csv(fname, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%Y-%m-%d"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SiteTypeId = col_integer(),
LimsProjectNum = col_character()
))
View(temp)
library(devtools)
document()
library(kcmarine)
setwd("~/R/kcmarine")
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
data <- import_discrete(file)
library(kcmarine)
data <- import_discrete(file)
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
file <- "test_discrete_data.csv"
test <- import_discrete(file)
setwd("~/R/kcmarine/inst/extdata")
test <- import_discrete(file)
library(devtools)
document()
library(kcmarine)
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
data <- import_discrete(file)
library(devtools)
document()
library(kcmarine)
library(kcmarine)
install.packages("devtools")
install.packages("devtools")
library(devtools)
