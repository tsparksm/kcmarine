))
temp = readr::read_csv(fname, col_names = TRUE,
col_types = cols(
SampleId = col_integer(),
ParmId = col_integer(),
ParmDisplayName = col_character(),
Value = col_double(),
OverrideValue = col_double(),
Units = col_character(),
Mdl = col_double(),
Rdl = col_double(),
QualityId = col_integer(),
QfrCode = col_character(),
TextValue = col_character(),
WorkNum = col_character(),
CollectDate = col_date(format = "%Y-%m-%d"),
CollectDateTime = col_datetime(format = "%Y-%m-%dT%H:%M:%SZ"),
LabSampleNum = col_character(),
Depth = col_double(),
SampleParmsReleased = col_logical(),
IsMarine = col_logical(),
Locator = col_character(),
SiteId = col_integer(),
SiteTypeId = col_integer(),
LimsProjectNum = col_character()
))
View(temp)
library(devtools)
document()
library(kcmarine)
setwd("~/R/kcmarine")
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
data <- import_discrete(file)
library(kcmarine)
data <- import_discrete(file)
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
file <- "test_discrete_data.csv"
test <- import_discrete(file)
setwd("~/R/kcmarine/inst/extdata")
test <- import_discrete(file)
library(devtools)
document()
library(kcmarine)
file <- system.file("extdata", "test_discrete_data.csv", package = "kcmarine")
data <- import_discrete(file)
library(devtools)
document()
library(kcmarine)
library(kcmarine)
install.packages("devtools")
install.packages("devtools")
library(devtools)
fname = "QYC_DO.csv"
options(warn=-1)
temp = readr::read_csv(fname, col_names = TRUE,
col_types = readr::cols(
SampleId = readr::col_integer(),
ParmId = readr::col_integer(),
ParmDisplayName = readr::col_character(),
Value = readr::col_double(),
OverrideValue = readr::col_double(),
Units = readr::col_character(),
Mdl = readr::col_double(),
Rdl = readr::col_double(),
QualityId = readr::col_integer(),
QfrCode = readr::col_character(),
TextValue = readr::col_character(),
WorkNum = readr::col_character(),
CollectDate = readr::col_character(),
CollectDateTime = readr::col_character(),
LabSampleNum = readr::col_character(),
Depth = readr::col_double(),
SampleParmsReleased = readr::col_logical(),
IsMarine = readr::col_logical(),
Locator = readr::col_character(),
SiteId = readr::col_integer(),
SiteTypeId = col_integer(),
LimsProjectNum = col_character()
))
options(warn=1)
CollectDate <- strptime(temp$CollectDate, "%Y-%m-%d")
if (is.na(CollectDate[1])) {
CollectDate <- strptime(temp$CollectDate, "%m/%d/%Y")
}
temp$CollectDate <- CollectDate
CollectDateTime <- as.POSIXct(temp$CollectDateTime,
format = "%Y-%m-%dT%H:%M:%SZ",
tz = "America/Los_Angeles")
temp$CollectDateTime <- CollectDateTime
setwd("~/Moorings")
options(warn=-1)
temp = readr::read_csv(fname, col_names = TRUE,
col_types = readr::cols(
SampleId = readr::col_integer(),
ParmId = readr::col_integer(),
ParmDisplayName = readr::col_character(),
Value = readr::col_double(),
OverrideValue = readr::col_double(),
Units = readr::col_character(),
Mdl = readr::col_double(),
Rdl = readr::col_double(),
QualityId = readr::col_integer(),
QfrCode = readr::col_character(),
TextValue = readr::col_character(),
WorkNum = readr::col_character(),
CollectDate = readr::col_character(),
CollectDateTime = readr::col_character(),
LabSampleNum = readr::col_character(),
Depth = readr::col_double(),
SampleParmsReleased = readr::col_logical(),
IsMarine = readr::col_logical(),
Locator = readr::col_character(),
SiteId = readr::col_integer(),
SiteTypeId = col_integer(),
LimsProjectNum = col_character()
))
options(warn=1)
CollectDate <- strptime(temp$CollectDate, "%Y-%m-%d")
if (is.na(CollectDate[1])) {
CollectDate <- strptime(temp$CollectDate, "%m/%d/%Y")
}
temp$CollectDate <- CollectDate
CollectDateTime <- as.POSIXct(temp$CollectDateTime,
format = "%Y-%m-%dT%H:%M:%SZ",
tz = "America/Los_Angeles")
temp$CollectDateTime <- CollectDateTime
library(lubridate)
library(tidyverse)
options(warn=-1)
temp = readr::read_csv(fname, col_names = TRUE,
col_types = readr::cols(
SampleId = readr::col_integer(),
ParmId = readr::col_integer(),
ParmDisplayName = readr::col_character(),
Value = readr::col_double(),
OverrideValue = readr::col_double(),
Units = readr::col_character(),
Mdl = readr::col_double(),
Rdl = readr::col_double(),
QualityId = readr::col_integer(),
QfrCode = readr::col_character(),
TextValue = readr::col_character(),
WorkNum = readr::col_character(),
CollectDate = readr::col_character(),
CollectDateTime = readr::col_character(),
LabSampleNum = readr::col_character(),
Depth = readr::col_double(),
SampleParmsReleased = readr::col_logical(),
IsMarine = readr::col_logical(),
Locator = readr::col_character(),
SiteId = readr::col_integer(),
SiteTypeId = col_integer(),
LimsProjectNum = col_character()
))
options(warn=1)
CollectDate <- strptime(temp$CollectDate, "%Y-%m-%d")
if (is.na(CollectDate[1])) {
CollectDate <- strptime(temp$CollectDate, "%m/%d/%Y")
}
temp$CollectDate <- CollectDate
CollectDateTime <- as.POSIXct(temp$CollectDateTime,
format = "%Y-%m-%dT%H:%M:%SZ",
tz = "America/Los_Angeles")
temp$CollectDateTime <- CollectDateTime
View(temp)
temp$CollectDateTime
library(devtools)
document()
setwd("~/R/kcmarine")
library(kcmarine)
library(devtools)
document()
library(kcmarine)
library(kcmarine)
file <- system.file("extdata", "test_mooring_aquarium_data.txt", package = "kcmarine")
data <- import_mooring_aquarium(file)
View(data)
OlsonNames()
import_mooring_QYC <- function(fname) {
options(warn=-1)
temp = readr::read_tsv(fname, skip = 53, col_names = TRUE, col_types = list(
readr::col_datetime(format = "%m/%d/%Y %I:%M:%S %p",
locale(tz = "America/Los_Angeles")),
readr::col_double(), # depth
readr::col_integer(),
readr::col_double(), # temperature
readr::col_integer(),
readr::col_double(), # salinity
readr::col_integer(),
readr::col_double(), # DO %
readr::col_double(), # DO
readr::col_integer(),
readr::col_double(), # chl
readr::col_integer(),
readr::col_double(), # pH
readr::col_integer(),
readr::col_double(), # density
readr::col_integer(),
readr::col_double(), # turbidity
readr::col_integer(),
readr::col_double(), # ext pH final
readr::col_integer(),
readr::col_double(), # int pH raw
readr::col_integer(),
readr::col_double(), # int pH recalc
readr::col_integer(),
readr::col_double(), # seafet temp
readr::col_integer(),
readr::col_double(), # ext pH recalc
readr::col_integer(),
readr::col_double(), # sonde batt
readr::col_double(), # logger batt
readr::col_character(), #sonde ID
readr::col_double(), #int pH v
readr::col_double(), #ext pH V
readr::col_character(), #SeaFET ID
readr::col_skip()
))
options(warn=1)
temp <- dplyr::rename(temp, DateTime = Date)
temp <- dplyr::rename(temp, DO_Sat = 'Dissolved_Oxygen_%Sat')
temp <- dplyr::rename(temp, DO_mg_L = 'Dissolved_Oxygen_mg/L')
temp <- dplyr::rename(temp, Density_kg_m3 = 'Density_kg/m^3')
temp <- dplyr::rename(temp, Chlorophyll_Fluorescence_ug_L = 'Chlorophyll_Fluorescence_ug/L')
temp <- tibble::add_column(temp, Qual_DO_Sat = temp$Qual_DO,
.after = "DO_Sat")
temp$Date <- as.Date(paste(lubridate::month(temp$DateTime), "/",
lubridate::day(temp$DateTime), "/",
lubridate::year(temp$DateTime), sep = ""),
"%m/%d/%Y")
return(temp)
}
setwd(~/Moorings)
setwd("~/Moorings")
test <- import_mooring_QYC("QuartermasterYachtClub_3_1_2011_to_9_15_2020.txt")
import_mooring_QYC <- function(fname) {
options(warn=-1)
temp = readr::read_tsv(fname, skip = 53, col_names = TRUE, col_types = list(
readr::col_datetime(format = "%m/%d/%Y %I:%M:%S %p",
locale = locale(tz = "America/Los_Angeles")),
readr::col_double(), # depth
readr::col_integer(),
readr::col_double(), # temperature
readr::col_integer(),
readr::col_double(), # salinity
readr::col_integer(),
readr::col_double(), # DO %
readr::col_double(), # DO
readr::col_integer(),
readr::col_double(), # chl
readr::col_integer(),
readr::col_double(), # pH
readr::col_integer(),
readr::col_double(), # density
readr::col_integer(),
readr::col_double(), # turbidity
readr::col_integer(),
readr::col_double(), # ext pH final
readr::col_integer(),
readr::col_double(), # int pH raw
readr::col_integer(),
readr::col_double(), # int pH recalc
readr::col_integer(),
readr::col_double(), # seafet temp
readr::col_integer(),
readr::col_double(), # ext pH recalc
readr::col_integer(),
readr::col_double(), # sonde batt
readr::col_double(), # logger batt
readr::col_character(), #sonde ID
readr::col_double(), #int pH v
readr::col_double(), #ext pH V
readr::col_character(), #SeaFET ID
readr::col_skip()
))
options(warn=1)
temp <- dplyr::rename(temp, DateTime = Date)
temp <- dplyr::rename(temp, DO_Sat = 'Dissolved_Oxygen_%Sat')
temp <- dplyr::rename(temp, DO_mg_L = 'Dissolved_Oxygen_mg/L')
temp <- dplyr::rename(temp, Density_kg_m3 = 'Density_kg/m^3')
temp <- dplyr::rename(temp, Chlorophyll_Fluorescence_ug_L = 'Chlorophyll_Fluorescence_ug/L')
temp <- tibble::add_column(temp, Qual_DO_Sat = temp$Qual_DO,
.after = "DO_Sat")
temp$Date <- as.Date(paste(lubridate::month(temp$DateTime), "/",
lubridate::day(temp$DateTime), "/",
lubridate::year(temp$DateTime), sep = ""),
"%m/%d/%Y")
return(temp)
}
test <- import_mooring_QYC("QuartermasterYachtClub_3_1_2011_to_9_15_2020.txt")
import_mooring_QYC <- function(fname) {
options(warn=-1)
temp = readr::read_tsv(fname, skip = 53, col_names = TRUE, col_types = list(
readr::col_datetime(format = "%m/%d/%Y %I:%M:%S %p"),
readr::col_double(), # depth
readr::col_integer(),
readr::col_double(), # temperature
readr::col_integer(),
readr::col_double(), # salinity
readr::col_integer(),
readr::col_double(), # DO %
readr::col_double(), # DO
readr::col_integer(),
readr::col_double(), # chl
readr::col_integer(),
readr::col_double(), # pH
readr::col_integer(),
readr::col_double(), # density
readr::col_integer(),
readr::col_double(), # turbidity
readr::col_integer(),
readr::col_double(), # ext pH final
readr::col_integer(),
readr::col_double(), # int pH raw
readr::col_integer(),
readr::col_double(), # int pH recalc
readr::col_integer(),
readr::col_double(), # seafet temp
readr::col_integer(),
readr::col_double(), # ext pH recalc
readr::col_integer(),
readr::col_double(), # sonde batt
readr::col_double(), # logger batt
readr::col_character(), #sonde ID
readr::col_double(), #int pH v
readr::col_double(), #ext pH V
readr::col_character(), #SeaFET ID
readr::col_skip()
))
options(warn=1)
temp <- dplyr::rename(temp, DateTime = Date)
temp <- dplyr::rename(temp, DO_Sat = 'Dissolved_Oxygen_%Sat')
temp <- dplyr::rename(temp, DO_mg_L = 'Dissolved_Oxygen_mg/L')
temp <- dplyr::rename(temp, Density_kg_m3 = 'Density_kg/m^3')
temp <- dplyr::rename(temp, Chlorophyll_Fluorescence_ug_L = 'Chlorophyll_Fluorescence_ug/L')
temp <- tibble::add_column(temp, Qual_DO_Sat = temp$Qual_DO,
.after = "DO_Sat")
lubridate::tz(temp$DateTime) <- "America/Los_Angeles"
temp$Date <- as.Date(paste(lubridate::month(temp$DateTime), "/",
lubridate::day(temp$DateTime), "/",
lubridate::year(temp$DateTime), sep = ""),
"%m/%d/%Y")
return(temp)
}
setwd("~/Moorings")
test <- import_mooring_QYC("QuartermasterYachtClub_3_1_2011_to_9_15_2020.txt")
test$DateTime[1]
library(devtools)
document()
setwd("~/R/kcmarine")
document()
rm(list = ls())
document()
library(kcmarine)
library(kcmarine)
fname <- "test_mooring_dockton_data.txt"
import_mooring_dockton <- function(fname) {
options(warn=-1)
temp = readr::read_tsv(fname, skip = 49, col_names = TRUE, col_types = list(
readr::col_datetime(format = "%m/%d/%Y %I:%M:%S %p"),
readr::col_double(),  # depth
readr::col_integer(),
readr::col_double(),  # temperature
readr::col_integer(),
readr::col_double(),  # salinity
readr::col_integer(),
readr::col_double(),  # DO %
readr::col_double(),  # DO
readr::col_integer(),
readr::col_double(),  # chlorophyll
readr::col_integer(),
readr::col_double(),  # turbidity
readr::col_integer(),
readr::col_double(),  # pH
readr::col_integer(),
readr::col_double(),  # density
readr::col_integer(),
readr::col_double(),  # air temp
readr::col_integer(),
readr::col_double(),  # surface PAR
readr::col_integer(),
readr::col_double(),  # air pressure
readr::col_integer(),
readr::col_double(),  # rainfall
readr::col_integer(),
readr::col_double(),  # humidity
readr::col_integer(),
readr::col_double(),  # wind dir
readr::col_integer(),
readr::col_double(),  # wind speed
readr::col_integer(),
readr::col_double(),  # sonde battery
readr::col_double(),  # logger battery
readr::col_character(),  # sonde ID
readr::col_skip()
))
options(warn=1)
temp <- dplyr::rename(temp, DateTime = Date)
temp <- dplyr::rename(temp, DO_Sat = "Dissolved_Oxygen_%Sat")
temp <- dplyr::rename(temp, DO_mg_L = "Dissolved_Oxygen_mg/L")
temp <- dplyr::rename(temp, Chlorophyll_Fluorescence_ug_L = "1_Chlorophyll_Fluorescence_ug/L")
temp <- dplyr::rename(temp, Density_kg_m3 = "Density_kg/m^3")
temp <- dplyr::rename(temp, Surf_PAR_umol_s_sqm = "Surf_PAR_umol/s/sqm")
temp <- dplyr::rename(temp, Rel_Humidity = "Rel_Humidity_%")
temp <- dplyr::rename(temp, Wind_Speed_m_sec = "Wind_Speed_m/sec")
temp <- tibble::add_column(temp, Qual_DO_Sat = temp$Qual_DO,
.after = "DO_Sat")
lubridate::tz(temp$DateTime) <- "America/Los_Angeles"
temp$Date <- as.Date(paste(lubridate::month(temp$DateTime), "/",
lubridate::day(temp$DateTime), "/",
lubridate::year(temp$DateTime), sep = ""),
"%m/%d/%Y")
return(temp)
}
library(lubridate)
library(tidyverse)
test <- import_mooring_dockton(fname)
import_mooring_dockton <- function(fname) {
options(warn=-1)
temp = readr::read_tsv(fname, skip = 49, col_names = TRUE, col_types = list(
readr::col_datetime(format = "%m/%d/%Y %I:%M:%S %p"),
readr::col_double(),  # depth
readr::col_integer(),
readr::col_double(),  # temperature
readr::col_integer(),
readr::col_double(),  # salinity
readr::col_integer(),
readr::col_double(),  # DO %
readr::col_double(),  # DO
readr::col_integer(),
readr::col_double(),  # chlorophyll
readr::col_integer(),
readr::col_double(),  # turbidity
readr::col_integer(),
readr::col_double(),  # pH
readr::col_integer(),
readr::col_double(),  # density
readr::col_integer(),
readr::col_double(),  # air temp
readr::col_integer(),
readr::col_double(),  # surface PAR
readr::col_integer(),
readr::col_double(),  # air pressure
readr::col_integer(),
readr::col_double(),  # rainfall
readr::col_integer(),
readr::col_double(),  # humidity
readr::col_integer(),
readr::col_double(),  # wind dir
readr::col_integer(),
readr::col_double(),  # wind speed
readr::col_integer(),
readr::col_double(),  # sonde battery
readr::col_double(),  # logger battery
readr::col_character(),  # sonde ID
readr::col_skip()
))
options(warn=1)
temp <- dplyr::rename(temp, DateTime = Date)
temp <- dplyr::rename(temp, DO_Sat = "Dissolved_Oxygen_%Sat")
temp <- dplyr::rename(temp, DO_mg_L = "Dissolved_Oxygen_mg/L")
temp <- dplyr::rename(temp, Chlorophyll_Fluorescence_ug_L = "Chlorophyll_Fluorescence_ug/L")
temp <- dplyr::rename(temp, Density_kg_m3 = "Density_kg/m^3")
temp <- dplyr::rename(temp, Surf_PAR_umol_s_sqm = "Surf_PAR_umol/s/sqm")
temp <- dplyr::rename(temp, Rel_Humidity = "Rel_Humidity_%")
temp <- dplyr::rename(temp, Wind_Speed_m_sec = "Wind_Speed_m/sec")
temp <- tibble::add_column(temp, Qual_DO_Sat = temp$Qual_DO,
.after = "DO_Sat")
lubridate::tz(temp$DateTime) <- "America/Los_Angeles"
temp$Date <- as.Date(paste(lubridate::month(temp$DateTime), "/",
lubridate::day(temp$DateTime), "/",
lubridate::year(temp$DateTime), sep = ""),
"%m/%d/%Y")
return(temp)
}
test <- import_mooring_dockton(fname)
View(test)
library(devtools)
document()
rm(list = ls())
document()
library(kcmarine)
Sys.getenv("PATH")
pkgbuild::find_rtools()
pkgbuild::rtools_path()
library(kcmarine)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(devtools)
document()
library(kcmarine)
as.POSIXct("2020-01-01")
test <- as.POSIXct("2020-01-01")
month(test)
library(lubridate)
month(test)
library(devtools)
document()
rm(list = ls())
library(kcmarine)
library(kcmarine)
library(devtools)
document
document()
library(kcmarine)
library(kcmarine)
sites <- "JSUR01"
fname <- "test.csv"
parms <- "DO"
?download_discrete
download_discrete(sites, parms, fname, include_bad = T)
